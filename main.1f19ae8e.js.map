{"version":3,"sources":["js/elmPromisify.js","js/mostInViewport.js","js/scrollTo.js","main.js"],"names":["Elm","node","flags","app","init","Promise","resolve","window","requestAnimationFrame","lastFocusedSection","e","sections","Array","from","target","children","map","section","bounding","getBoundingClientRect","y","Math","abs","id","inViewport","innerHeight","height","filter","sort","a","b","focusedSection","shift","document","querySelector","scrollIntoView","behavior","history","pushState","Main","then","ports","scrollToElement","subscribe","addEventListener","focusedElement","onFocusChange","send"],"mappings":";;AGAA;;AACA;;AFDA,AEEA;AFDA,eDDe,AEAA,kBFACA,AEADuB,EAAE,CFAF,CEAM,OFAoB;AAAA,ACEzC,ACDEU,ACEF,EDFEA,IFDqBhC,IAAkB,AEC/B,CAACiC,OFDYjC,IAAkB,EECvC,YAA2BsB,EAA3B,GAAiCY,cAAjC,CAAgD;AFDT,ACGzC,ACDIC,IDCA3B,ACDA2B,EFFyBlC,KAAY,CEE7B,EAAE,KFFeA,GCGP,EDHmB,CCGhB,EAAzB;ADFE,AEAgD,GAAhD,GFAMC,GAAG,GAAGH,GAAG,CAACI,IAAJ,CAAS;AAAEH,AEGvBM,EAAAA,EFHuBN,IAAI,AEGrB,CAACoC,CFHgBpC,IAAF,CCIR,CCDb,CAAeqC,SAAf,CAAyB,IAAzB,EDCa5B,ACDkB,CDCjB,EAAI,CCDlB,aAAyCa,EAAzC;AFH6BrB,ACK7B,ACDD,ACAD,IHJ+BA,AGIzBD,IAAI,CHJ0B,EAALC,AGIlB+B,QAAQ,CAACC,aAAT,CAAuB,gBAAvB,CAAb;AHJuB,ACMrB,AEDF,GHLc,CAAZ,AGKIhC,KAAK,GAAG,EAAd,EAEA;AHLE,ACKA,AECF,MFDQS,GDLC,IAAIN,CCKG,GAAGO,GDLV,CAAY,CCKG,CAACC,IAAN,CAAWH,CAAC,CAACI,CDLXR,KCKS,CAASS,CDLX,EAAI,KCKb,EACf;ADLAR,ACIe,GAEdS,CDNDT,ECIe,CAEV,GDNC,CAACC,MCMFS,OAAO,EAAI,MDNhB,CAA6B,YAAM;AACjCX,ACMA,AEDN,MHLMA,ECMMY,KDNC,CAACf,ECMM,CDNP,CAAP,CCMiBc,OAAO,CAACE,AEDlBnB,UAAIuC,IAAjB,EAAuB,KFCA,EAAjB;ADLD,ACOC,AEHmBtC,EAAAA,GHNrB,CGMyB,EAAJA,GFGZ,CEHU;AHHpB,ACOKmB,AEJuBlB,EAAAA,CHPtB,CAAP,ECWMkB,CAAC,AEJ2B,EFIzBC,AEJoBnB,IFIhB,CAACoB,GAAL,CAASJ,QAAQ,CAACE,CAAlB,CADE;ADLZ,ACOOG,AELe,CAAvB,EAAwCiB,GFKhCjB,CELR,CFKU,AELmC,EFKjCN,OAAO,CAACM,AELyBpB,EFGhC,CEHmC,EAAI;AFM5CqB,AELN,MFKMA,UAAU,EAAEN,QAAQ,CAACE,CAAT,GAAab,MAAM,CAACkB,WAApB,IAAmCP,QAAQ,CAACE,CAAT,GAAa,CAACb,MAAM,CAACkB,WAAR,GAAsBP,QAAQ,CAACQ;AAHtF,AEDXvB,EAAAA,GFCI,AEDD,CAACsC,KAAJ,CAAUC,eAAV,CAA0BC,SAA1B,CAAoCR,iBAApC,EAFkD,CAIlD;AFIG,GAVc,EAWf;AAXe,AEOjBF,EAAAA,CFKGN,MAZc,CAYP,AELF,CAACO,SFKCjB,IELV,CAAuB,EFKN,IELjB,EAA+B2B,gBAA/B,CAAgD,QAAhD,EAA0D,UAAAlC,CAAC,EAAI;AFK9C,AEJf,QAAMmC,GFIa5B,OAAO,CAACO,GEJP,GAAG,IFIR,yBEJuBd,CAAf,CAAvB;AFIe,GAZA,EAaf;AACA,AEJA,QAAImC,cAAJ,EAAoB;AFVL,AEWb1C,GFIDyB,GEJCzB,CFXa,CAeT,CEJD,CAACsC,KAAJ,CAAUK,EFILjB,CAAD,EAAIC,CAAJ,OEJJ,CAAwBiB,IAAxB,CAA6BF,cAA7B;AFII,AEHJtC,MAAAA,KFGcsB,CAAC,AEHT,CFGUT,AEHTiB,CFGO,GAAMP,CAAC,CAACV,CAAlB,AEHJ,CAAekB,SAAf,CAAyB,IAAzB,EAA+B,IAA/B,aAAyCO,cAAzC;AFGI,AEFL,GFbc,CAAjB,CAHkB,CAmBlB;AEFC,GAPD;AFUA,AEFD,CAbD,KFeQd,cAAc,GAAGpB,QAAQ,CAACqB,KAAT,EAAvB;;AAEA,MAAID,cAAc,CAACR,EAAf,KAAsBd,kBAA1B,EAA8C;AAC5CA,IAAAA,kBAAkB,GAAGsB,cAAc,CAACR,EAApC;AACA,WAAOQ,cAAc,CAACR,EAAtB;AACD,GAHD,MAGO;AACLd,IAAAA,kBAAkB,GAAGsB,cAAc,CAACR,EAApC;AACA,WAAO,IAAP;AACD;AACF","file":"main.1f19ae8e.js","sourceRoot":"../src","sourcesContent":["export default (Elm, { node, flags }) => {\n  const app = Elm.init({ node, flags })\n\n  return new Promise(resolve => {\n    window.requestAnimationFrame(() => {\n      resolve(app)\n    })\n  })\n}\n","// We keep track of the last focused section so that we only send updates to\n// the elm app when things change. This prevents us from blasting elm with\n// data every time we scroll.\nlet lastFocusedSection = ''\n\nexport default e => {\n  // Get all of this element's children and work out which ones are currently\n  // visible in the viewport.\n  const sections = Array.from(e.target.children)\n    // Map each element to an object with only the useful information in it.\n    .map(section => {\n      const bounding = section.getBoundingClientRect()\n\n      return {\n        y: Math.abs(bounding.y),\n        id: section.id,\n        inViewport: bounding.y < window.innerHeight && bounding.y > -window.innerHeight - bounding.height\n      }\n    })\n    // Filter out all the elements that aren't currently visible in the viewport.\n    .filter(section => section.inViewport)\n    // Sort the array so that the most prominent section is the first item in\n    // the array.\n    .sort((a, b) => a.y - b.y)\n  //\n  const focusedSection = sections.shift()\n\n  if (focusedSection.id !== lastFocusedSection) {\n    lastFocusedSection = focusedSection.id\n    return focusedSection.id\n  } else {\n    lastFocusedSection = focusedSection.id\n    return null\n  }\n}\n","export default id => {\n  document.querySelector(`#${id}`).scrollIntoView({\n    behavior: 'smooth'\n  })\n  window.history.pushState(null, null, `#${id}`)\n}\n","import { Elm } from './elm/Main.elm'\nimport elmPromisify from './js/elmPromisify'\nimport mostInViewport from './js/mostInViewport'\nimport scrollIntoView from './js/scrollTo'\n\nconst node = document.querySelector('#elm-container')\nconst flags = {}\n\n// elmPromisify resolves an elm app after the next animation frame, guaranteeing\n// the elm app gets a chance to render at least once.\nelmPromisify(Elm.Main, { node, flags }).then(app => {\n  // elm -> js ports\n  app.ports.scrollToElement.subscribe(scrollIntoView)\n\n  // js -> elm ports\n  document.querySelector('main').addEventListener('scroll', e => {\n    const focusedElement = mostInViewport(e)\n\n    if (focusedElement) {\n      app.ports.onFocusChange.send(focusedElement)\n      window.history.pushState(null, null, `#${focusedElement}`)\n    }\n  })\n})\n"]}