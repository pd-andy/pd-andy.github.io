{"version":3,"sources":["js/mostInViewport.js","js/scrollTo.js","main.js"],"names":["lastFocusedSection","app","e","sections","focusedSection","Array","from","target","children","map","section","bounding","getBoundingClientRect","y","Math","abs","id","inViewport","window","innerHeight","filter","sort","a","b","shift","ports","onFocusChange","send","history","pushState","document","querySelector","scrollIntoView","behavior","Elm","Main","init","node","flags","images","do","doApp","flow","flowArchitecture","scrollToElement","subscribe","addEventListener"],"mappings":";;;;;;;;;AAKkB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EAFlB,IAAIA,EAAqB,GAEV,EAAA,SAAAC,GAAO,OAAA,SAAAC,GAGdC,IAiBAC,EAjBWC,MAAMC,KAAKJ,EAAEK,OAAOC,UAElCC,IAAI,SAAAC,GACGC,IAAAA,EAAWD,EAAQE,wBAElB,MAAA,CACLC,EAAGC,KAAKC,IAAIJ,EAASE,GACrBG,GAAIN,EAAQM,GACZC,WAAYN,EAASE,EAAIK,OAAOC,aAAeR,EAASE,GAAKK,OAAOC,eAIvEC,OAAO,SAAAV,GAAWA,OAAAA,EAAQO,aAG1BI,KAAK,SAACC,EAAGC,GAAMD,OAAAA,EAAET,EAAIU,EAAEV,IAEMW,QAE5BpB,EAAeY,KAAOhB,IACxBC,EAAIwB,MAAMC,cAAcC,KAAKvB,EAAeY,IAC5CE,OAAOU,QAAQC,UAAU,KAAM,KAAUzB,IAAAA,OAAAA,EAAeY,MAG1DhB,EAAqBI,EAAeY,KA3BpB,QAAA,QAAA;;ACAjB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,aAAA,EALc,IAAA,EAAA,SAAAA,GACbc,SAASC,cAAkBf,IAAAA,OAAAA,IAAMgB,eAAe,CAC9CC,SAAU,WAEZf,OAAOU,QAAQC,UAAU,KAAM,KAAUb,IAAAA,OAAAA,KAC1C,QAAA,QAAA;;ACoBD,aAxBA,QAAA,6CAGA,IAAA,EAAA,EAAA,QAAA,qBACA,EAAA,EAAA,QAAA,gCAEA,EAAA,QAAA,kBACA,EAAA,EAAA,QAAA,wBACA,EAAA,EAAA,QAAA,kBAgBA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAbA,IAAMf,EAAMiC,EAAIC,IAAAA,KAAKC,KAAK,CACxBC,KAAMP,SAASC,cAAc,QAC7BO,MAAO,CACLC,OAAQ,CACNC,GAAIC,EADE,QAENC,KAAMC,EAAAA,YAKZ1C,EAAIwB,MAAMmB,gBACPC,UAAUb,EADb,SAGAF,SAASC,cAAc,QACpBe,iBAAiB,UAAU,EAAe7C,EAAAA,SAAAA","file":"main.4b8ea757.js","sourceRoot":"../src","sourcesContent":["// We keep track of the last focused section so that we only send updates to\n// the elm app when things change. This prevents us from blasting elm with\n// data every time we scroll.\nlet lastFocusedSection = ''\n\nexport default app => e => {\n  // Get all of this element's children and work out which ones are currently\n  // visible in the viewport.\n  const sections = Array.from(e.target.children)\n    // Map each element to an object with only the useful information in it.\n    .map(section => {\n      const bounding = section.getBoundingClientRect()\n\n      return {\n        y: Math.abs(bounding.y),\n        id: section.id,\n        inViewport: bounding.y < window.innerHeight && bounding.y > -window.innerHeight\n      }\n    })\n    // Filter out all the elements that aren't currently visible in the viewport.\n    .filter(section => section.inViewport)\n    // Sort the array so that the most prominent section is the first item in\n    // the array.\n    .sort((a, b) => a.y - b.y)\n  //\n  const focusedSection = sections.shift()\n\n  if (focusedSection.id !== lastFocusedSection) {\n    app.ports.onFocusChange.send(focusedSection.id)\n    window.history.pushState(null, null, `#${focusedSection.id}`)\n  }\n\n  lastFocusedSection = focusedSection.id\n}\n","export default id => {\n  document.querySelector(`#${id}`).scrollIntoView({\n    behavior: 'smooth'\n  })\n  window.history.pushState(null, null, `#${id}`)\n}\n","// CSS imports\nimport '@fortawesome/fontawesome-free/css/all.css'\n\n// Image imports\nimport doApp from './img/do-app.png'\nimport flowArchitecture from './img/flow-architecture.png'\n\nimport { Elm } from './elm/Main.elm'\nimport mostInViewport from './js/mostInViewport'\nimport scrollIntoView from './js/scrollTo'\n\n//\nconst app = Elm.Main.init({\n  node: document.querySelector('body'),\n  flags: {\n    images: {\n      do: doApp,\n      flow: flowArchitecture\n    }\n  }\n})\n\napp.ports.scrollToElement\n  .subscribe(scrollIntoView)\n\ndocument.querySelector('main')\n  .addEventListener('scroll', mostInViewport(app))\n"]}